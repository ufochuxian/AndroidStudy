plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 35

    defaultConfig {
        applicationId "com.eric.androidstudy"
        minSdkVersion 25
        targetSdkVersion 34
        //renderscript 兼容配置;
        renderscriptTargetApi 14
        renderscriptSupportModeEnabled true
        versionCode 1
        versionName "1.0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                //用于向AbstractProcessor传参数
                arguments = [moduleName: "CustomApt"]
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    // 添加自定义打包任务
    android.applicationVariants.configureEach { variant ->
        // 获取打包时间
        def dateTime = new Date().format('yyyyMMdd_HHmmss')

        // 在variant的assembleTask完成后执行复制操作
        variant.assembleProvider.configure { assembleTask ->
            assembleTask.doLast {
                // 确保输出目录存在
                def outDir = new File(project.rootDir, "out/${variant.flavorName}")
                outDir.mkdirs()

                // 获取APK文件
                def apkFile = variant.outputs[0].outputFile

                // 构建新的APK名称
                def newApkName = "${project.name}_${variant.flavorName}_v${variant.versionName}_${variant.buildType.name}_${dateTime}.apk"

                // 复制并重命名APK
                copy {
                    from apkFile
                    into outDir
                    rename { newApkName }
                }

                println """
                ========================================
                APK generated at: ${outDir}/${newApkName}
                ========================================
            """
            }
        }
    }

// 可选：保留原有的总任务
    tasks.register('buildAllChannels') {
        dependsOn android.applicationVariants.collect { variant ->
            variant.assembleProvider
        }

        doLast {
            println "All channel packages have been generated in ${project.rootDir}/out/"
        }
    }


    // 添加构建前清理输出目录的选项
    def shouldCleanOutput = true // 设置为 true 则在每次构建前清理输出目录

    android.applicationVariants.configureEach { variant ->
        variant.assembleProvider.configure { assembleTask ->
            assembleTask.doFirst {
                if (shouldCleanOutput) {
                    def outDir = new File(project.rootDir, "out/${variant.flavorName}")
                    if (outDir.exists()) {
                        outDir.deleteDir()
                        println "Cleaned output directory: ${outDir.absolutePath}"
                    }
                }
            }
        }
    }

// 可选：添加文件大小信息
    android.applicationVariants.configureEach { variant ->
        variant.assembleProvider.configure { assembleTask ->
            assembleTask.doLast {
                def apkFile = variant.outputs[0].outputFile
                def fileSize = apkFile.length()
                def sizeInMb = String.format("%.2f", fileSize / (1024 * 1024))
                println """
                ========================================
                APK Size: ${sizeInMb} MB
                ========================================
            """
            }
        }
    }


    // 定义多个 Product Flavor
    flavorDimensions "source" // 定义维度名称

    productFlavors {
        inner {
            dimension "source" // 将 Flavor 归入 "source" 维度
            applicationIdSuffix ".inner" // 应用 ID 后缀
            versionNameSuffix "_inner"  // 版本名称后缀
        }
        google {
            dimension "source"
            applicationIdSuffix ".google"
            versionNameSuffix "_google"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
    namespace 'com.eric.androidstudy'

    tasks.register("generateModule") {
        doLast {
            // 从 gradle.properties 中读取参数
            def moduleName = project.hasProperty("moduleName") ? project.property("moduleName").toString() : "DefaultModule"
            def packagePath = project.hasProperty("packagePath") ? project.property("packagePath").toString() : "com.example"
            def outputPath = project.hasProperty("outputPath") ? project.property("outputPath").toString() : "src/main/java"

            // 动态生成完整包名路径
            def packageDir = packagePath.replace('.', '/')
            def baseDir = file("${project.projectDir}/${outputPath}/${packageDir}")
            def resDir = file("${project.projectDir}/src/main/res/layout")

            // 创建目录
            baseDir.mkdirs()
            resDir.mkdirs()

            // 规范化模块名称，防止非法字符
            def sanitizedModuleName = moduleName.replaceAll("[^A-Za-z0-9_]", "")

            // 生成 Activity 文件
            def activityContent = """
                package ${packagePath};

                import android.os.Bundle;
                import ${packagePath}.databinding.Activity${sanitizedModuleName}Binding;
                import com.transsion.architecturemodule.base.activity.BaseVMActivity;

                public class ${sanitizedModuleName}Activity extends BaseVMActivity<Activity${sanitizedModuleName}Binding, ${sanitizedModuleName}ViewModel> {
                    @Override
                    public void initData() {
                        logTd("${sanitizedModuleName} initData");
                    }

                    @Override
                    public void initView(Bundle savedInstanceState) {
                        logTd("${sanitizedModuleName} initView");
                        showPage(R.id.container, ${sanitizedModuleName}Fragment.newInstance(), "${sanitizedModuleName}Fragment", true);
                    }

                    @Override
                    public void initObserve() {
                        logTd("${sanitizedModuleName} initObserve");
                    }

                    @Override
                    public void initAction() {
                        logTd("${sanitizedModuleName} initAction");
                    }

                    @Override
                    public Class<${sanitizedModuleName}ViewModel> viewModelClass() {
                        return ${sanitizedModuleName}ViewModel.class;
                    }

                    @Override
                    public Activity${sanitizedModuleName}Binding getViewBinding() {
                        return Activity${sanitizedModuleName}Binding.inflate(getLayoutInflater());
                    }
                }
            """.stripIndent()
            def activityFile = new File(baseDir, "${sanitizedModuleName}Activity.java")
            activityFile.write(activityContent)

            // 生成 ViewModel 文件
            def viewModelContent = """
                package ${packagePath};

                import com.transsion.architecturemodule.base.viewmodel.BaseViewModel;

                public class ${sanitizedModuleName}ViewModel extends BaseViewModel {
                }
            """.stripIndent()
            def viewModelFile = new File(baseDir, "${sanitizedModuleName}ViewModel.java")
            viewModelFile.write(viewModelContent)

            // 生成布局 XML 文件
            def layoutContent = """
                <?xml version="1.0" encoding="utf-8"?>
                <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
                    android:layout_width="match_parent"
                    android:layout_height="match_parent">

                    <androidx.constraintlayout.widget.ConstraintLayout
                        android:id="@+id/container"
                        android:layout_width="match_parent"
                        android:layout_height="match_parent" />

                </androidx.constraintlayout.widget.ConstraintLayout>
            """.stripIndent()
            def layoutFile = new File(resDir, "activity_${sanitizedModuleName.toLowerCase()}.xml")
            layoutFile.write(layoutContent)

            println """
            ========================================
            Module ${sanitizedModuleName} has been generated at:
            - Activity: ${activityFile.absolutePath}
            - ViewModel: ${viewModelFile.absolutePath}
            - Layout: ${layoutFile.absolutePath}
            ========================================
            """
        }
    }
}



    dependencies {
    api(project(':base-library'))
    implementation 'androidx.exifinterface:exifinterface:1.3.6'
    implementation 'androidx.test.ext:junit-ktx:1.2.1'


    //为了在编译期间调用AbstractProcessor的init和process方法，自动生成java代码，这里需要使用annotationProcessor
    annotationProcessor project(':router-compiler')

    // AndroidX Test 核心库
    androidTestImplementation 'androidx.test:core:1.5.0'

    // JUnit4 支持（包含 AndroidJUnit4）
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'

    // Espresso 测试框架（UI 测试）
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'


}

class CustomPlugin implements Plugin<Project> {
    @Override
    void apply(Project target) {
        target.task("showCustomPlugin") {
            doLast {
                println("this is custom plugin")
            }
        }
    }
}